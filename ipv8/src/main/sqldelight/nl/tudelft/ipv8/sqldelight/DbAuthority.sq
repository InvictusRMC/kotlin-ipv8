CREATE TABLE revocations (
    authority_id INTEGER NOT NULL,
    version_id INTEGER NOT NULL,
    revoked_hash BLOB NOT NULL,
    FOREIGN KEY(authority_id) REFERENCES authorities(authority_id),
    FOREIGN KEY(version_id) REFERENCES versions(version_id)
);

CREATE TABLE versions (
    version_id INTEGER PRIMARY KEY,
    authority_id INTEGER NOT NULL,
    version_number INTEGER NOT NULL,
    signature BLOB NOT NULL,
    FOREIGN KEY(authority_id) REFERENCES authorities(authority_id)
);

CREATE TABLE authorities (
    authority_id INTEGER PRIMARY KEY,
    public_key BLOB,
    public_key_hash BLOB UNIQUE NOT NULL,
    latest_version_id INTEGER,
    recognized INTEGER
);

insertRevocation:
INSERT INTO revocations (authority_id, version_id, revoked_hash) VALUES (?, ?, ?);

insertVersion:
INSERT INTO versions (authority_id, version_number, signature) VALUES (?, ?, ?);

insertAuthority:
INSERT INTO authorities (public_key, public_key_hash, latest_version_id, recognized) VALUES (?, ?, ?, ?);

getAllRecognizedAuthorities:
SELECT authorities.public_key, authorities.public_key_hash, versions.version_number, authorities.recognized FROM authorities LEFT JOIN versions ON authorities.latest_version_id = versions.version_id WHERE authorities.recognized = 1;

getAllAuthorities:
SELECT authorities.public_key, authorities.public_key_hash, versions.version_number, authorities.recognized FROM authorities LEFT JOIN versions ON authorities.latest_version_id = versions.version_id;

getAuthorityIdByHash:
SELECT authority_id FROM authorities WHERE authorities.public_key_hash = ? LIMIT 1;

getAuthorityByHash:
SELECT authorities.public_key, authorities.public_key_hash, versions.version_number, authorities.recognized FROM authorities LEFT JOIN versions ON authorities.latest_version_id = versions.version_id WHERE public_key_hash = ?;

recognizeAuthority:
UPDATE authorities SET recognized = 1 WHERE public_key_hash = ?;

disregardAuthority:
UPDATE authorities SET recognized = 0 WHERE public_key_hash = ?;

getRevocationsByAuthorityId:
SELECT revoked_hash FROM revocations WHERE authority_id = ?;

getRevocationsByAuthorityIdAndVersionId:
SELECT revoked_hash FROM revocations WHERE authority_id = ? AND version_id = ?;

updateVersionFor:
UPDATE authorities SET latest_version_id = ? WHERE public_key_hash = ?;

getVersionByAuthorityIDandVersionNumber:
SELECT * FROM versions WHERE authority_id = ? AND version_number = ?;

getVersionsByAuthorityIDandVersionNumbers:
SELECT * FROM versions WHERE authority_id = ? AND version_number IN ?;

getVersionsSince:
SELECT version_number FROM versions WHERE authority_id = ? AND version_number > ?;

getAllRevocations:
SELECT authorities.public_key_hash, versions.version_number, versions.signature, revocations.revoked_hash FROM authorities LEFT JOIN versions ON authorities.latest_version_id = versions.version_id LEFT JOIN revocations ON authorities.authority_id = revocations.authority_id;

getRevocations:
SELECT revoked_hash FROM revocations;